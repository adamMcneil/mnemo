'use strict';

const fs = require('fs');
const http = require('http');
const path = require('path');
const WebSocket = require('./lib/websocket');
const readline = require('readline');

WebSocket.createWebSocketStream = require('./lib/stream');
WebSocket.Server = require('./lib/websocket-server');
WebSocket.Receiver = require('./lib/receiver');
WebSocket.Sender = require('./lib/sender');

WebSocket.WebSocket = WebSocket;
WebSocket.WebSocketServer = WebSocket.Server;

module.exports = WebSocket;

const wss = new WebSocket.Server({ port: 8000 });
const wssServer = new WebSocket.Server({ port: 8001 });

const controllerStates = new Map();

const server = http.createServer((req, res) => {
  let filePath = '../web-socket-client/index.html';

  fs.readFile(filePath, (err, content) => {
    if (err) {
      res.writeHead(500, { 'Content-Type': 'text/plain' });
      res.end('Internal Server Error');
    } else {
      res.writeHead(200, { 'Content-Type': 'text/html' });
      res.end(content, 'utf-8');
    }
  });
});

wssServer.on('connection', function connection(x) {
  wss.on('connection', function connection(ws) {
    console.log('Client connected');

    ws.on('message', function incoming(message) {
      const messageObject = JSON.parse(message);
      x.send(message.toString());
      controllerStates[messageObject.name] = messageObject;
    });


    ws.on('close', function() {
      console.log('Client disconnected');
    });
  })
});

// wssServer.on('connection', function connection(ws) {
//   const sendInterval = setInterval(() => {
//     const message = JSON.stringify(controllerStates);
//     ws.send(message);
//   }, 100); // Sends data every 1000ms (1 second)
//
//   ws.on('close', () => {
//     clearInterval(sendInterval); // Stop sending when the client disconnects
//   });
// })

server.listen(8080, '0.0.0.0', () => {
  console.log('Server running at http://0.0.0.0:8080');
});

// Set up a command-line interface to listen for user input
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log("Type 'show' to display controllerStates:");

rl.on('line', (input) => {
  if (input.trim().toLowerCase() === 'show') {
    console.log('Current controllerStates:', controllerStates);
  } else {
    console.log("Unknown command. Type 'show' to display controllerStates.");
  }
});
